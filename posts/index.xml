<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Mazikai's Blog</title><link>https://mazikai002.github.io/posts/</link><description>所有文章 | Mazikai's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>mazikai002@gmail.com (mazikai002)</managingEditor><webMaster>mazikai002@gmail.com (mazikai002)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 25 Dec 2023 19:51:23 +0800</lastBuildDate><atom:link href="https://mazikai002.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Golang 底层原理 —— 逃逸分析</title><link>https://mazikai002.github.io/go-escape_analyze/</link><pubDate>Mon, 25 Dec 2023 19:51:23 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/go-escape_analyze/</guid><description><![CDATA[<blockquote>
<p>逃逸分析 —— 让Golang程序员专注高效工作的挖井人！</br></p>
</blockquote>]]></description></item><item><title>Golang 底层原理 —— 内存管理</title><link>https://mazikai002.github.io/go-memory_manage/</link><pubDate>Thu, 05 Oct 2023 17:32:13 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/go-memory_manage/</guid><description><![CDATA[<blockquote>
<p>作者当前认知的Golang内存管理机制</br></p>
</blockquote>]]></description></item><item><title>Redis 缓存异常 —— 缓存雪崩、击穿、穿透</title><link>https://mazikai002.github.io/redis-cache_exception/</link><pubDate>Fri, 08 Sep 2023 22:03:13 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/redis-cache_exception/</guid><description><![CDATA[<blockquote>
<p>引入缓存层，会有缓存异常的三个常见问题，分别是缓存雪崩、缓存击穿、缓存穿透。 </br>
本文涉及缓存雪崩、击穿、穿透的定义、原因以及应对方案。 </br>
请看如下表格，希望对您有帮助 ~  </br></p>
</blockquote>]]></description></item><item><title>MySQL 优化手段 —— 索引失效</title><link>https://mazikai002.github.io/mysql-index_failure/</link><pubDate>Thu, 17 Aug 2023 15:43:57 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/mysql-index_failure/</guid><description><![CDATA[<blockquote>
<p>聊聊索引失效</br></p>
</blockquote>]]></description></item><item><title>计算机基础 —— 浏览器访问网页过程及后续</title><link>https://mazikai002.github.io/whole_process_of_accessing_web_pages/</link><pubDate>Thu, 13 Jul 2023 11:27:33 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/whole_process_of_accessing_web_pages/</guid><description><![CDATA[<blockquote>
<p>在浏览器地址栏输入URL，按下回车后究竟发生了什么？</br>
本文还展示了研发人员是如何构建发布用户获取到的Web资源？</br>
该部分为作者梳理的精简内容，希望对您有帮助 ~ </br></p>
</blockquote>]]></description></item><item><title>MySQL 优化手段 —— 分库分表</title><link>https://mazikai002.github.io/mysql-separate_librarytable/</link><pubDate>Fri, 30 Jun 2023 11:25:22 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/mysql-separate_librarytable/</guid><description><![CDATA[<blockquote>
<p>分库分表</br></p>
</blockquote>]]></description></item><item><title>Golang 基本语法 —— 浅谈 Context</title><link>https://mazikai002.github.io/go-context/</link><pubDate>Mon, 22 May 2023 19:53:39 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/go-context/</guid><description><![CDATA[<blockquote>
<p>context为Go中的一个标准库, 专门用来处理多个协程之间的控制问题, 比如协程的取消, 协程运行截止时间, 协程运行的超时时间, 协程之间的数据传输等.</br></p>
</blockquote>]]></description></item><item><title>MySQL 重要日志 —— binlog、redo log、undo log</title><link>https://mazikai002.github.io/mysql-logs/</link><pubDate>Fri, 21 Apr 2023 14:47:36 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/mysql-logs/</guid><description><![CDATA[<blockquote>
<p>MySQL日志主要包括错误日志、查询日志、慢查询日志、回滚日志、重做日志、归档日志几大类。</br>
本文主要聊一聊MySQL的重要日志，binlog 、redo log 、undo log ！</br>
该部分为作者梳理的精简内容，希望对您有帮助 ~ </br></p>
</blockquote>]]></description></item><item><title>Golang 基本语法 —— struct可以比较吗</title><link>https://mazikai002.github.io/go-struct/</link><pubDate>Sat, 18 Mar 2023 18:27:25 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/go-struct/</guid><description><![CDATA[<blockquote>
<p>struct能不能比较？得分情况！</br></p>
</blockquote>]]></description></item><item><title>Redis 底层知识 —— 过期删除 &amp; 内存淘汰</title><link>https://mazikai002.github.io/redis-expirationstrategymemoryobsolescence/</link><pubDate>Sat, 11 Feb 2023 12:40:26 +0800</pubDate><author>mazikai</author><guid>https://mazikai002.github.io/redis-expirationstrategymemoryobsolescence/</guid><description><![CDATA[<blockquote>
<p>Redis重要的使用场景有两个 : 缓存和分布式锁。 </br>
这两个使用方式或多或少都涉及到两个底层知识 : 过期删除 &amp; 内存淘汰 </br></p>
</blockquote>]]></description></item></channel></rss>